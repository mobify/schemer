(function($, _, Mobify, document) {
    var attributesToEnable = { 
            link: ['href'], 
            img: ['src'], 
            iframe: ['src'], 
            style: ['media'], 
            script: ['src', 'type']
        }
        // JB: Why is `src` in attributes to kill?
      , attributesToKill = {img: ['src', 'width', 'height']}
      , attributesToDisable = _({}).extend(attributesToEnable, attributesToKill)
        // Cache for expressions generated by `getAttrRe`.
      , attrExps = {}
      , tagRe = new RegExp(
            '<('
            + _.keys(attributesToEnable).join('|')
            + ')([\\s\\S]*?)>', 'gi')
      , openingScriptRe = new RegExp('(<script[\\s\\S]*?>)', 'gi')
      , timing = Mobify.timing;
    
    function getAttrRe(srcAttr) {
        // <space><attr>='...'|"..."
        return new RegExp(
            '\\s+((?:'
            + srcAttr
            + ")\\s*=\\s*(?:'([\\s\\S])+?'|\"([\\s\\S])+?\"))", 'gi');
    }

    function deactivate(whole, tag, tail) {
        tag = tag.toLowerCase();

        var srcAttr = attributesToDisable[tag].join('|')
          , attrRe = attrExps[srcAttr] = attrExps[srcAttr] || getAttrRe(srcAttr)
          , killer = '';
        
        // Give <script|style> an unknown type.
        if (tag == 'script') {
            killer = ' type="text/mobify-script"';
        } else if (tag == 'style') {
            killer = ' media="mobify-media"';
        }

        var result = '<' + tag + killer + tail.replace(attrRe, ' x-$1') + '>';
        return result;
    }

    Mobify.externals = {       
        // Disables external attributes in HTML eg. <img x-src="src" />
        // Doesn't disable attributes inside <script>, but don't get confused by
        // <!-- <script> -->
        disable: function(htmlStr) {            
            var splitRe = /(<!--[\s\S]*?-->)|(?=<\/script)/i
            var bits = htmlStr.split(splitRe)
            var ret = _(bits).map(function(fragment) {
                // Fragment may be empty or just a comment, no need to escape those.
                if (!fragment) return ''
                if (/^<!--/.test(fragment)) return fragment

                // parsed = [before, <script>, script contents]
                // Disable before and the <script> itself.
                var parsed = fragment.split(openingScriptRe)
                parsed[0] = parsed[0].replace(tagRe, deactivate)
                if (parsed[1]) parsed[1] = parsed[1].replace(tagRe, deactivate)
                return parsed
            });
            
            return _.flatten(ret).join('');
        },

        // Enable external resources by re-enabling their attributes.
        enable: function(htmlStr) {
            return htmlStr
                .replace(/\sx-(href|src|media|type)/g, ' $1')
                .replace(/\s(type="text\/mobify-script"|media="mobify-media")/g, '');
        },

        // 1. Find the escaped nodes.
        // 2. Get the original markup from the nodes.
        // 3. Disable the markup.
        // 4. Construct the shadow DOM.
        grabContent: function(context) {
            var context = context || document
              , headMarkup = Mobify.headMarkup
              , bodyMarkup = Mobify.bodyMarkup
              , bodyOpenTag = Mobify.bodyOpenTagMarkup
              , $sourceHead = $('head', context).first()
              , $sourceBody = $('body', context).first()
              , $sourceHtml = $('html', context).first();

            if (!headMarkup && !bodyMarkup) {
                // Extract escaped markup out of the DOM.
                var rawMarkup = this.unescapeStyleHacks($sourceHead, $sourceBody);

                // Store the escaped markup for unmobify() calls.
                headMarkup = Mobify.headMarkup = rawMarkup[0];
                bodyMarkup = Mobify.bodyMarkup = rawMarkup[1];
                bodyOpenTag = Mobify.bodyOpenTagMarkup = rawMarkup[2];

                timing.addPoint('Recovered Markup');                    
            }
            
            // Disable attributes that can cause loading of external resources
            var disabledHeadMarkup = this.disable(headMarkup)
              , disabledBodyMarkup = this.disable(bodyMarkup);
            
            timing.addPoint('Disabled Markup');

            // Reinflate HTML strings back into declawed DOM nodes.
            var $head = $(document.createElement('head'))
                    .attr($sourceHead.mapAttributes())
                    .append(disabledHeadMarkup);

            // jQuery can't create <body> with attributes, so
            // create a <div> and take the attributes from that.
            var bodyAttrs = bodyOpenTag
                    ? $(bodyOpenTag.replace(/^<body/i, '<div')).mapAttributes()
                    : $sourceBody.mapAttributes();
            
            var $body = $(document.createElement('body'))
                    .attr(bodyAttrs)
                    .append(disabledBodyMarkup);
            
            var $html = $(document.createElement('html'))
                    .attr($sourceHtml.mapAttributes())
                    .append($head)
                    .append($body);
            
            timing.addPoint('Built Passive DOM');
            
            // JB: Populate contents outside of $html eg. doctype.
            return {
                $head: $head,
                $body: $body,
                $html: $html
            };
        }
    };
})(Mobify.$, Mobify._, Mobify, document);