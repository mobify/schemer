// TODO: Fire analytics if we're escaping the page.
//       if (gotoDesktop) // do analytics

// Determine whether a device is mobile and set the mobile cookie.
// This script is loaded even after the users opts out of the mobile view, so 
// be careful to preserve the value!
//
// This script can be loaded in three ways:
// 1) By a `mobified` site, asynchronously
// 2) By a `desktop` browser, asynchronously
// 3) By an `unknown` browser, synchronously
//
// If loaded synchronously?, Mobify.config.path can be //preview.mobify.com/<protocol relative path>
// So don't rely on it.
(function (window, document, navigator, Mobify) {
    // 4+ tags pass `role` with `detect.js` allowing you to choose your destiny.
    var detectjsRe = /detect\.js/
      , scripts = document.getElementsByTagName('script')
      , studioJS
      , role

    var i = scripts.length;
    while (i--) {
        src = scripts[i].src;
        if (src && detectjsRe.test(src)) {
            var m = /role=(.*?)(&|$)/.exec(src);
            role = m && m[1];
            break;
        }
    }

    var siteConfig = {site_config|s};
    //var siteConfig = {};

    var gotoMobile = 0;
    var gotoDesktop = 0;
    // 4 tags use DOM posioning. Passing `antidote` as the last parameter to 
    // posioned methods invovkes regular behaviour.
    var callAntidote = 'We1Rd[0Ng';

    // 3.2 tags change mobile cookie key from `mobify` to `mobify-js`.
    // Detect and use the correct cookie key.
    var tagVersion = Mobify.config.tagVersion;
    var shouldMobifyRe = tagVersion ? /mobify-js=([\-0-9]+)/ : /mobify=(\d)/;
    var shouldMobifyFlag = tagVersion ? 'mobify-js' : 'mobify';


    var validStudioOrigin = function(origin) {
        return (-1 !== ["http://localhost:5555"].indexOf(origin))
    }

    // Follow the advice of the mobile cookie.
    var match = shouldMobifyRe.exec(document.cookie);
    if (match) {
        var mobifyValue = +match[1];
        
        // mobify-js=studio
        if (isNaN(mobifyValue)) {
            Mobify.studioJS = {
                role: 'mobile',
                set: function(key, value) {
                    Mobify.studioJS[key] = value;
                    var event = document.createEvent('Event');
                    event.initEvent('mobifyHTML', true, true);
                    event[key] = value;
                    window.dispatchEvent(event);
                }
            };

            gotoMobile = 1;

        // mobify-js=1
        } else if (mobifyValue > 0) {
            gotoMobile = 1;

        // mobify-js=0
        } else {
            gotoDesktop = 0;
        }
    }

    // If you are detected as mobile:
    if (!gotoDesktop && (gotoMobile || /ip(hone|od)|android.*(mobile)|blackberry.*applewebkit/i.test(navigator.userAgent))) {
        gotoMobile = 1;

        // `nogo` becomes a noop to prevent us from unmobifying.
        Mobify.nogo = function(){};

        // If we used this as a detect script, start escaping.
        if (Mobify.config.stageTwoDetect || role == 'detect') {
            Mobify.go();
        }
    }

    // BACKWARDS COMPTABILITY:
    // JB: I'm not sure what tags this is for. It's not 3.3.1, so must be lower.
    if (!gotoMobile) {
        Mobify.config.started = true;
    }

    // If we haven't already stored the mobify cookie, do it now.
    if (!match) {
        Mobify.setCookie(shouldMobifyFlag, gotoMobile, 7);
    }

    // If this script is loaded asynchronously as part of a `mobified` page,
    // `Mobify.desktopAnalytics` will already be declared.
    // We use this as a flag to indicate analytics have already been called for this page.

    // TODO: v4 tags load everything asynchronously. We need a better kind of check.
    if (!Mobify.desktopAnalytics || role == 'desktop') {
        Mobify.desktopAnalytics = function() {
            // Prevent this function from running twice
            if (!! Mobify.desktopAnalytics.fired) return;
            Mobify.desktopAnalytics.fired = true;

            // safety mechanisms have been subverted. 
            // we need to prevent analytics from running on 
            // pages that are already mobile.            
            if (gotoMobile) {
                return;
            }

            // We can't track analytics without a GA ID!
            var ga_account = siteConfig.ga_account;
            if (!ga_account) return;

            // Not sure if we would ever set this to anything else. 
            var prefix = siteConfig.ga_prefix || 'MOBIFY';

            window._gaq = window._gaq || [];

            // Start loading GA if it isn't here already.
            if (!window._gat) {
                var ga = document.createElement('script');
                ga.type = 'text/javascript';
                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
                var s = document.getElementsByTagName('script')[0];
                s.parentNode.insertBefore(ga, s);
            }

            // Need to figure out the ga_domain from the location.hostname
            var ga_domain = (function(hostname, domain_dict){
                var domain = 'none';
                if (! domain_dict) return domain;
                var hostname_parts = hostname.split('.');

                while (hostname_parts.length > 0) {
                    domain = domain_dict[hostname_parts.join('_')];
                    if (!! domain) return domain;
                    hostname_parts = hostname_parts.slice(1); // cut off the head and continue
                }
                // fallback, domain is set to 'none'
                return domain;
            })(window.location.hostname, (siteConfig.ga_domains) ? siteConfig.ga_domains : false );

            var ga_options = (!! (siteConfig.ga_options) ? siteConfig.ga_options : []);
            var ga_args = [
                            ['_setAccount', ga_account], 
                            ['_setDomainName', ((ga_domain === 'none') ? '' : '.') + ga_domain],
                            ["_addIgnoredRef", ga_domain]
                        ].concat(
                            ga_options,
                            [['_trackPageview'], ['_trackPageLoadTime']]
                        );

            // Add in the Mobify GA tracker prefix as needed
            // and fire off the calls
            for (var i=0, ii=ga_args.length;i<ii;i++) {
                var inner_array = ga_args[i];
                inner_array[0] = prefix + '.' + inner_array[0];
                window._gaq.push(inner_array);
            }

            // track quantcast for tablets since we may not handle this in mobify.js
            var tabletRe = /(ipad|android(?!.*mobile))/i;
            if (!tabletRe.test(navigator.userAgent)) return;
            var isSSL = location.protocol[4] == 's';
            var _qevents = window._qevents = window._qevents || [];
            var qcScript = document.createElement('script');
            qcScript.src = '//' + (isSSL ? 'secure' : 'edge') + '.quantserve.com/quant.js';
            qcScript.async = true;
            var s = document.getElementsByTagName('script')[0];
            s.parentNode.insertBefore(qcScript, s);
            _qevents.push({qacct:"p-eb0xvejp1OUw6"});
        }
    }

    // Queue analytics for loading.
    if (document.readyState === 'complete' || document.readyState === 'loaded') {
        // Internet explorer and other browsers sometimes complete processing before this async script is in place
        // Wrap in setTimeout to provide control flow to other contenders
        setTimeout( Mobify.desktopAnalytics, 1 );
    } else  if (document.addEventListener) {
        document.addEventListener('DOMContentLoaded', Mobify.desktopAnalytics, false, callAntidote);
    } else if ( document.attachEvent ) {
        document.attachEvent( "onreadystatechange", Mobify.desktopAnalytics);
        // A fallback to window.onload, that will always work
        window.attachEvent( "onload", Mobify.desktopAnalytics);
    }  else {
        // final fallback since we just don't know about the document readystate.
        // Don't worry, it won't run twice.  
        setTimeout( Mobify.desktopAnalytics, 1 );        
    }

    
})(this, document, navigator, Mobify);